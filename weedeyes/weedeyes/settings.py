"""
Django settings for weedeyes project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import firebase_admin
from firebase_admin import db
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e9#^slj)*@jzp!5m$a$!r5=mr-t79jyh-t2!j)ezu4a3f&6e$z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#ALLOWED_HOSTS = ['your_domain.com', 'your_ip_address','127.0.0.1']

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'Users',
    'report',
    #'firebase_auth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    #'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
AUTHENTICATION_BACKENDS = [
    'users.authentication_backends.FirebaseAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',  # 기본 ModelBackend 유지
]
#SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # 또는 'django.contrib.sessions.backends.cached_db'
#SESSION_COOKIE_NAME = 'sessionid'  # 쿠키 이름 설정
#SESSION_SAVE_EVERY_REQUEST = True  # 매 요청마다 세션 저장
#SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 브라우저 닫을 때 세션 만료
#SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Django의 세션 관련 설정을 비활성화
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_HTTPONLY = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Firebase를 사용하여 사용자 인증에 대한 백엔드 설정
#AUTHENTICATION_BACKENDS = [
#    'users.authentication_backends.FirebaseAuthenticationBackend',
#]

ROOT_URLCONF = 'weedeyes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weedeyes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


import os
import pyrebase
import firebase_admin
from firebase_admin import credentials


DATABASES={
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


#SESSION_ENGINE = 'django.contrib.sessions.backends.db'
#SESSION_ENGINE = 'django.contrib.sessions.backends.firebase'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/users/login/'


#firebase
# settings.py


if not firebase_admin._apps:
    """SETUP FIREBASE CREDENTIALS"""
    cred_info = {
        "type": os.environ.get('FIREBASE_ACCOUNT_TYPE'),
        "project_id": os.environ.get('FIREBASE_PROJECT_ID'),
        "private_key_id": os.environ.get('FIREBASE_PRIVATE_KEY_ID'),
        "private_key": os.environ.get('FIREBASE_PRIVATE_KEY').replace('\\n', '\n'),
        "client_email": os.environ.get('FIREBASE_CLIENT_EMAIL'),
        "client_id": os.environ.get('FIREBASE_CLIENT_ID'),
        "auth_uri": os.environ.get('FIREBASE_AUTH_URI'),
        "token_uri": os.environ.get('FIREBASE_TOKEN_URI'),
        "auth_provider_x509_cert_url": os.environ.get('FIREBASE_AUTH_PROVIDER_X509_CERT_URL'),
        "client_x509_cert_url": os.environ.get('FIREBASE_CLIENT_X509_CERT_URL')
    }

    default_app = firebase_admin.initialize_app(credentials.Certificate(cred_info))

    pyrebase_config = {
        "apiKey": os.environ.get('FIREBASE_CLIENT_API_KEY'),
        "authDomain": f"{os.environ.get('FIREBASE_PROJECT_ID')}.firebaseapp.com",
        "databaseURL": "",
        "storageBucket": f"{os.environ.get('FIREBASE_PROJECT_ID')}.appspot.com",
        "serviceAccount": cred_info
    }
    
    pyrebase_app = pyrebase.initialize_app(pyrebase_config)